// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: inspection/v1/inspection.proto

package inspectionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InspectionService_GetInspection_FullMethodName = "/inspection.v1.InspectionService/GetInspection"
)

// InspectionServiceClient is the client API for InspectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InspectionServiceClient interface {
	GetInspection(ctx context.Context, in *GetInspectionRequest, opts ...grpc.CallOption) (*GetInspectionResponse, error)
}

type inspectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInspectionServiceClient(cc grpc.ClientConnInterface) InspectionServiceClient {
	return &inspectionServiceClient{cc}
}

func (c *inspectionServiceClient) GetInspection(ctx context.Context, in *GetInspectionRequest, opts ...grpc.CallOption) (*GetInspectionResponse, error) {
	out := new(GetInspectionResponse)
	err := c.cc.Invoke(ctx, InspectionService_GetInspection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InspectionServiceServer is the server API for InspectionService service.
// All implementations must embed UnimplementedInspectionServiceServer
// for forward compatibility
type InspectionServiceServer interface {
	GetInspection(context.Context, *GetInspectionRequest) (*GetInspectionResponse, error)
	mustEmbedUnimplementedInspectionServiceServer()
}

// UnimplementedInspectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInspectionServiceServer struct {
}

func (UnimplementedInspectionServiceServer) GetInspection(context.Context, *GetInspectionRequest) (*GetInspectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInspection not implemented")
}
func (UnimplementedInspectionServiceServer) mustEmbedUnimplementedInspectionServiceServer() {}

// UnsafeInspectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InspectionServiceServer will
// result in compilation errors.
type UnsafeInspectionServiceServer interface {
	mustEmbedUnimplementedInspectionServiceServer()
}

func RegisterInspectionServiceServer(s grpc.ServiceRegistrar, srv InspectionServiceServer) {
	s.RegisterService(&InspectionService_ServiceDesc, srv)
}

func _InspectionService_GetInspection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInspectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectionServiceServer).GetInspection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InspectionService_GetInspection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectionServiceServer).GetInspection(ctx, req.(*GetInspectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InspectionService_ServiceDesc is the grpc.ServiceDesc for InspectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InspectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspection.v1.InspectionService",
	HandlerType: (*InspectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInspection",
			Handler:    _InspectionService_GetInspection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inspection/v1/inspection.proto",
}
